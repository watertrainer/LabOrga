import com.google.gson.annotations.Expose;
import com.jgoodies.forms.layout.CellConstraints;

import javax.swing.*;
import java.awt.*;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;

//todo convert to JPanel
public class Subject {
    public JPanel content;
    @Expose
    private String teacher;
    @Expose
    private String subjectSt;
    private MainSubject MainSub;
    private JLabel label;
    private boolean enabled;

    private boolean hasAssign;

    public Subject(String Teacher, MainSubject MainSub) {
        this.teacher = Teacher;
        this.MainSub = MainSub;
        $$$setupUI$$$();
        subjectSt = MainSub.getName();
        hasAssign = true;


        MainSub.addSubject(this);
        MainSub.updateHasAssign();

    }

    public Subject() {
        super();
        this.teacher = "";
        $$$setupUI$$$();
        hasAssign = true;
    }

    public void init() {
        if (Main.inst.first) {
            subjectSt = MainSub.getName();
        }
        MainSub = Main.inst.getMainSubject(subjectSt);
    }

    public void addAuftrag() {
        setHasAssign(true);
    }

    public void addToGUI(JPanel p) {
        this.updateColor();
        // p.add(this, cc.xy(1,row));
        p.add(this.content);

    }

    @Override
    public String toString() {
        return label.getText();
    }

    public Subject clone(String t) {
        return new Subject(t, getMainSub());
    }


    @Override
    public boolean equals(Object s) {
        if (s instanceof Subject) {
            Subject f = ((Subject) s);
            return f.teacher.equals(teacher) && f.getMainSub().equals(getMainSub());
        } else {
            return false;
        }

    }

    public String getSubjectSt() {
        return subjectSt;
    }

    public void setSubjectSt(String subjectSt) {
        this.subjectSt = subjectSt;
    }

    public String getTeacher() {
        return teacher;
    }

    public void setTeacher(String teacher) {
        this.teacher = teacher;
    }

    public String getName() {
        return getMainSub().getName();
    }

    public Color getColor() {
        return MainSub.getColor();
    }


    public void updateColor() {
        if (((MainSub.getColor().getBlue() + MainSub.getColor().getRed() + MainSub.getColor().getGreen()) / 3) < 128)
            label.setForeground(Color.white);
        label.setBackground(MainSub.getColor());
    }

    public void setHasAssign(boolean hasAssign) {
        this.hasAssign = hasAssign;
        System.out.println("Hello");
        if (hasAssign)
            label.setText(getMainSub().getName() + ", " + teacher + " |LAB Auftrag Vorhanden");
        else {
            label.setText(getMainSub().getName() + ", " + teacher + " |kein LAB Auftrag Vorhanden");
        }
    }

    public MainSubject getMainSub() {

        return MainSub;
    }

    private void createUIComponents() {
        label = new JLabel();
        content = new JPanel() {
            @Override
            public void paintComponent(Graphics g) {
                g.setColor(MainSub.getDrawAttColor());
                g.fillOval(content.getWidth() - 30, 0, content.getHeight(), content.getHeight());
            }
        };
        label.setOpaque(true);
        content.setAlignmentY(1);
        content.setAlignmentX(Box.LEFT_ALIGNMENT);
        content.setMaximumSize(new Dimension(Short.MAX_VALUE, 25));
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        content.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        label.setText("Label");
        content.add(label, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return content;
    }

    public boolean isEnabled() {
        return enabled;
    }

    public void setEnabled(boolean enabled) {
        this.enabled = enabled;
    }
}
